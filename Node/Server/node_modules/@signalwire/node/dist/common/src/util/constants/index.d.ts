export declare enum Netcast {
    ProtocolProviderAdd = "protocol.provider.add",
    ProtocolProviderRemove = "protocol.provider.remove"
}
export declare const STORAGE_PREFIX = "@signalwire:";
export declare const ADD = "add";
export declare const REMOVE = "remove";
export declare const SESSION_ID = "sessId";
export declare enum SwEvent {
    SocketOpen = "signalwire.socket.open",
    SocketClose = "signalwire.socket.close",
    SocketError = "signalwire.socket.error",
    SocketMessage = "signalwire.socket.message",
    SpeedTest = "signalwire.internal.speedtest",
    Ready = "signalwire.ready",
    Error = "signalwire.error",
    Notification = "signalwire.notification",
    Messages = "signalwire.messages",
    Calls = "signalwire.calls",
    MediaError = "signalwire.rtc.mediaError"
}
export declare enum PeerType {
    Offer = "offer",
    Answer = "answer"
}
export declare enum Direction {
    Inbound = "inbound",
    Outbound = "outbound"
}
export declare enum VertoMethod {
    Invite = "verto.invite",
    Attach = "verto.attach",
    Answer = "verto.answer",
    Info = "verto.info",
    Display = "verto.display",
    Media = "verto.media",
    Event = "verto.event",
    Bye = "verto.bye",
    Punt = "verto.punt",
    Broadcast = "verto.broadcast",
    Subscribe = "verto.subscribe",
    Unsubscribe = "verto.unsubscribe",
    ClientReady = "verto.clientReady",
    Modify = "verto.modify"
}
export declare const NOTIFICATION_TYPE: {
    generic: string;
    [VertoMethod.Display]: string;
    [VertoMethod.Attach]: string;
    conferenceUpdate: string;
    callUpdate: string;
    vertoClientReady: string;
    userMediaError: string;
    refreshToken: string;
};
export declare enum BladeMethod {
    Netcast = "blade.netcast",
    Broadcast = "blade.broadcast",
    Disconnect = "blade.disconnect"
}
export declare enum DeviceType {
    Video = "videoinput",
    AudioIn = "audioinput",
    AudioOut = "audiooutput"
}
