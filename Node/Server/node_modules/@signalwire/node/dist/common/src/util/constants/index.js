"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Netcast;
(function (Netcast) {
    Netcast["ProtocolProviderAdd"] = "protocol.provider.add";
    Netcast["ProtocolProviderRemove"] = "protocol.provider.remove";
})(Netcast = exports.Netcast || (exports.Netcast = {}));
exports.STORAGE_PREFIX = '@signalwire:';
exports.ADD = 'add';
exports.REMOVE = 'remove';
exports.SESSION_ID = 'sessId';
var SwEvent;
(function (SwEvent) {
    SwEvent["SocketOpen"] = "signalwire.socket.open";
    SwEvent["SocketClose"] = "signalwire.socket.close";
    SwEvent["SocketError"] = "signalwire.socket.error";
    SwEvent["SocketMessage"] = "signalwire.socket.message";
    SwEvent["SpeedTest"] = "signalwire.internal.speedtest";
    SwEvent["Ready"] = "signalwire.ready";
    SwEvent["Error"] = "signalwire.error";
    SwEvent["Notification"] = "signalwire.notification";
    SwEvent["Messages"] = "signalwire.messages";
    SwEvent["Calls"] = "signalwire.calls";
    SwEvent["MediaError"] = "signalwire.rtc.mediaError";
})(SwEvent = exports.SwEvent || (exports.SwEvent = {}));
var PeerType;
(function (PeerType) {
    PeerType["Offer"] = "offer";
    PeerType["Answer"] = "answer";
})(PeerType = exports.PeerType || (exports.PeerType = {}));
var Direction;
(function (Direction) {
    Direction["Inbound"] = "inbound";
    Direction["Outbound"] = "outbound";
})(Direction = exports.Direction || (exports.Direction = {}));
var VertoMethod;
(function (VertoMethod) {
    VertoMethod["Invite"] = "verto.invite";
    VertoMethod["Attach"] = "verto.attach";
    VertoMethod["Answer"] = "verto.answer";
    VertoMethod["Info"] = "verto.info";
    VertoMethod["Display"] = "verto.display";
    VertoMethod["Media"] = "verto.media";
    VertoMethod["Event"] = "verto.event";
    VertoMethod["Bye"] = "verto.bye";
    VertoMethod["Punt"] = "verto.punt";
    VertoMethod["Broadcast"] = "verto.broadcast";
    VertoMethod["Subscribe"] = "verto.subscribe";
    VertoMethod["Unsubscribe"] = "verto.unsubscribe";
    VertoMethod["ClientReady"] = "verto.clientReady";
    VertoMethod["Modify"] = "verto.modify";
})(VertoMethod = exports.VertoMethod || (exports.VertoMethod = {}));
exports.NOTIFICATION_TYPE = {
    generic: 'event',
    [VertoMethod.Display]: 'participantData',
    [VertoMethod.Attach]: 'participantData',
    conferenceUpdate: 'conferenceUpdate',
    callUpdate: 'callUpdate',
    vertoClientReady: 'vertoClientReady',
    userMediaError: 'userMediaError',
    refreshToken: 'refreshToken',
};
var BladeMethod;
(function (BladeMethod) {
    BladeMethod["Netcast"] = "blade.netcast";
    BladeMethod["Broadcast"] = "blade.broadcast";
    BladeMethod["Disconnect"] = "blade.disconnect";
})(BladeMethod = exports.BladeMethod || (exports.BladeMethod = {}));
var DeviceType;
(function (DeviceType) {
    DeviceType["Video"] = "videoinput";
    DeviceType["AudioIn"] = "audioinput";
    DeviceType["AudioOut"] = "audiooutput";
})(DeviceType = exports.DeviceType || (exports.DeviceType = {}));
