"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = __importDefault(require("../util/logger"));
const VertoHandler_1 = __importDefault(require("../webrtc/VertoHandler"));
const relay_1 = require("../util/constants/relay");
function BroadcastHandler(session, broadcastParams) {
    const { protocol, event, params } = broadcastParams;
    const { event_type, node_id } = params;
    if (protocol !== session.relayProtocol) {
        return logger_1.default.error('Session protocol mismatch.');
    }
    const _switchOnEventType = () => {
        switch (event_type) {
            case relay_1.CallNotification.State:
            case relay_1.CallNotification.Receive:
            case relay_1.CallNotification.Connect:
            case relay_1.CallNotification.Record:
            case relay_1.CallNotification.Play:
            case relay_1.CallNotification.Collect:
            case relay_1.CallNotification.Fax:
            case relay_1.CallNotification.Detect:
            case relay_1.CallNotification.Tap:
            case relay_1.CallNotification.SendDigits:
                session.calling.notificationHandler(params);
                break;
            case 'webrtc.message':
                const handler = new VertoHandler_1.default(session);
                handler.nodeId = node_id;
                handler.handleMessage(params.params);
                break;
            default:
                return logger_1.default.error(`Unknown notification type: ${event_type}`);
        }
    };
    switch (event) {
        case 'queuing.relay.events':
            _switchOnEventType();
            break;
        case 'queuing.relay.tasks':
            session.tasking.notificationHandler(params);
            break;
        case 'queuing.relay.messaging':
            session.messaging.notificationHandler(params);
            break;
        default:
            return logger_1.default.error(`Unknown notification type: ${event_type}`);
    }
}
exports.default = BroadcastHandler;
