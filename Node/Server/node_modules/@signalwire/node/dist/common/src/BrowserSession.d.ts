import BaseSession from './BaseSession';
import BaseCall from './webrtc/BaseCall';
import { ICacheDevices, IAudioSettings, IVideoSettings, BroadcastParams, SubscribeParams } from './util/interfaces';
export default abstract class BrowserSession extends BaseSession {
    calls: {
        [callId: string]: BaseCall;
    };
    micId: string;
    micLabel: string;
    camId: string;
    camLabel: string;
    autoRecoverCalls: boolean;
    private _iceServers;
    private _localElement;
    private _remoteElement;
    protected _jwtAuth: boolean;
    protected _reconnectDelay: number;
    protected _devices: ICacheDevices;
    protected _audioConstraints: boolean | MediaTrackConstraints;
    protected _videoConstraints: boolean | MediaTrackConstraints;
    protected _speaker: string;
    connect(): Promise<void>;
    checkPermissions(audio?: boolean, video?: boolean): Promise<boolean>;
    logout(): void;
    disconnect(): Promise<void>;
    speedTest(bytes: number): Promise<{}>;
    getDevices(): Promise<MediaDeviceInfo[]>;
    getVideoDevices(): Promise<MediaDeviceInfo[]>;
    getAudioInDevices(): Promise<MediaDeviceInfo[]>;
    getAudioOutDevices(): Promise<MediaDeviceInfo[]>;
    refreshDevices(): Promise<ICacheDevices>;
    readonly devices: ICacheDevices;
    getDeviceResolutions(deviceId: string): Promise<any[]>;
    readonly videoDevices: {
        [deviceId: string]: MediaDeviceInfo;
    };
    readonly audioInDevices: {
        [deviceId: string]: MediaDeviceInfo;
    };
    readonly audioOutDevices: {
        [deviceId: string]: MediaDeviceInfo;
    };
    readonly mediaConstraints: {
        audio: boolean | MediaTrackConstraints;
        video: boolean | MediaTrackConstraints;
    };
    setAudioSettings(settings: IAudioSettings): Promise<MediaTrackConstraints>;
    disableMicrophone(): void;
    enableMicrophone(): void;
    setVideoSettings(settings: IVideoSettings): Promise<MediaTrackConstraints>;
    disableWebcam(): void;
    enableWebcam(): void;
    iceServers: RTCIceServer[] | boolean;
    speaker: string;
    localElement: HTMLMediaElement | string | Function;
    remoteElement: HTMLMediaElement | string | Function;
    vertoBroadcast({ nodeId, channel: eventChannel, data }: BroadcastParams): void;
    vertoSubscribe({ nodeId, channels: eventChannel, handler }: SubscribeParams): Promise<any>;
    vertoUnsubscribe({ nodeId, channels: eventChannel }: SubscribeParams): Promise<any>;
}
